package org.netbeans.modules.python.projectproperties;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.Properties;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.python.PythonUtility;
import org.netbeans.modules.python.project.PythonProject;
import org.netbeans.modules.python.project.PythonProjectStateHandler;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;

/**
 *
 * @author albilu
 */
public class PythonRunPanel extends javax.swing.JPanel implements DocumentListener {

    private static final long serialVersionUID = 1L;
    PythonProject project;

    /**
     * Creates new form PythonRunPanel
     */
    public PythonRunPanel(PythonProject project) {
        initComponents();
        this.project = project;
        paramsTextField.getDocument().addDocumentListener(this);
        loadProperties();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scriptFileChooser = new javax.swing.JFileChooser();
        scriptLabel = new javax.swing.JLabel();
        paramsLabel = new javax.swing.JLabel();
        scriptTextField = new javax.swing.JTextField();
        paramsTextField = new javax.swing.JTextField();
        scriptButton = new javax.swing.JButton();

        scriptFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(PythonRunPanel.class, "PythonRunPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cantarell", 1, 12))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(scriptLabel, org.openide.util.NbBundle.getMessage(PythonRunPanel.class, "PythonRunPanel.scriptLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(paramsLabel, org.openide.util.NbBundle.getMessage(PythonRunPanel.class, "PythonRunPanel.paramsLabel.text")); // NOI18N

        scriptTextField.setText(org.openide.util.NbBundle.getMessage(PythonRunPanel.class, "PythonRunPanel.scriptTextField.text")); // NOI18N

        paramsTextField.setText(org.openide.util.NbBundle.getMessage(PythonRunPanel.class, "PythonRunPanel.paramsTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(scriptButton, org.openide.util.NbBundle.getMessage(PythonRunPanel.class, "PythonRunPanel.scriptButton.text")); // NOI18N
        scriptButton.setToolTipText(org.openide.util.NbBundle.getMessage(PythonRunPanel.class, "PythonRunPanel.scriptButton.toolTipText")); // NOI18N
        scriptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scriptButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paramsLabel)
                    .addComponent(scriptLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scriptTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scriptButton))
                    .addComponent(paramsTextField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scriptLabel)
                    .addComponent(scriptTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scriptButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paramsLabel)
                    .addComponent(paramsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void scriptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scriptButtonActionPerformed
        scriptFileChooser.setCurrentDirectory(FileUtil.toFile(project
                .getProjectDirectory()));
        int returnValue = scriptFileChooser.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            scriptTextField.setText(scriptFileChooser.getSelectedFile().toPath().toString());
            markChange();
        }
    }//GEN-LAST:event_scriptButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel paramsLabel;
    private static javax.swing.JTextField paramsTextField;
    private javax.swing.JButton scriptButton;
    private javax.swing.JFileChooser scriptFileChooser;
    private javax.swing.JLabel scriptLabel;
    public static javax.swing.JTextField scriptTextField;
    // End of variables declaration//GEN-END:variables

    private void loadProperties() {
        try {
            Properties prop = PythonUtility.getProperties(project, false);
            FileObject fileObject = project.getProjectDirectory()
                    .getFileObject("main.py");
            scriptTextField.setText(prop.getProperty("nbproject.run.script",
                    (fileObject != null
                            ? Paths.get(fileObject.getPath()).toString() : "")));
            paramsTextField.setText(prop.getProperty("nbproject.run.params", ""));
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    public static void setProperties(PythonProject project) {
        try {
            Properties prop = PythonUtility.getProperties(project, false);
            prop.setProperty("nbproject.run.script", scriptTextField.getText());
            prop.setProperty("nbproject.run.params", paramsTextField.getText());
            prop.store(new FileWriter(FileUtil.toFile(project.getProjectDirectory()
                    .getFileObject("nbproject/project.properties"))), null);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    void markChange() {
        project.getLookup().lookup(PythonProjectStateHandler.class).mark();
    }

    @Override
    public void insertUpdate(DocumentEvent de) {
        markChange();
    }

    @Override
    public void removeUpdate(DocumentEvent de) {
        markChange();
    }

    @Override
    public void changedUpdate(DocumentEvent de) {
        markChange();
    }

}
